import { Abortable } from '../types/abortable.type.ts';
import {
  InfomaniakLLM,
  InfomaniakLLMQueryMessage,
  InfomaniakLLMQueryOptions,
  InfomaniakLLMQueryResponse,
} from './infomaniak-llm.class.ts';

/* TYPES */

export interface ConversationOptions extends Omit<InfomaniakLLMQueryOptions, 'messages' | keyof Abortable> {
  readonly client: InfomaniakLLM;
}

export interface ConversationNextOptions extends Omit<ConversationOptions, 'messages' | 'client' | 'product_id'> {
  readonly index?: number,
}

/* CLASS */

/**
 * This is a helper to handle a conversation with an LLM.
 *
 * It stores automatically the `messages`.
 */
export class Conversation {
  readonly #client: InfomaniakLLM;
  readonly #options: Omit<ConversationOptions, 'messages' | 'client'>;
  #messages: readonly InfomaniakLLMQueryMessage[];
  // deno-lint-ignore no-explicit-any
  #queue: Promise<any>;

  constructor(
    {
      client,
      ...options
    }: ConversationOptions,
  ) {
    this.#client = client;
    this.#options = options;
    this.#messages = [];
    this.#queue = Promise.resolve();
  }

  /**
   * The list of messages `given to` and `generated by` the LLM.
   */
  get messages(): readonly InfomaniakLLMQueryMessage[] {
    return this.#messages;
  }

  /**
   * Provides the next instruction (as `user`) to the LLM.
   */
  next(
    content: string,
    {
      index = this.#messages.length,
      ...options
    }: ConversationNextOptions = {},
  ): Promise<string> {
    return this.#queue = this.#queue
      .catch(() => {
      })
      .then((): Promise<string> => {
        const messages: readonly InfomaniakLLMQueryMessage[] = [
          ...this.#messages.slice(0, index),
          {
            role: 'user',
            content,
          },
        ];

        return this.#client.query({
          ...this.#options,
          ...options,
          messages,
        })
          .then((response: InfomaniakLLMQueryResponse): string => {
            this.#messages = [
              ...messages,
              response.choices[0].message,
            ];
            return this.#messages[this.#messages.length - 1].content;
          });
      });
  }
}
